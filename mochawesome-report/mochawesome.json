{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2023-09-01T01:04:51.948Z",
    "end": "2023-09-01T01:04:53.499Z",
    "duration": 1551,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a1f5f4ab-0b0f-437a-addf-12c889a6db8f",
      "title": "",
      "fullFile": "C:\\Automation\\Automation API\\test\\api.test.js",
      "file": "\\test\\api.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "47347209-3d89-44bc-b583-ff5cdf96762b",
          "title": "Automation API Testing",
          "fullFile": "C:\\Automation\\Automation API\\test\\api.test.js",
          "file": "\\test\\api.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "[Positive] - POST Create a new user",
              "fullTitle": "Automation API Testing [Positive] - POST Create a new user",
              "timedOut": false,
              "duration": 453,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createUser = {\n    name: 'rizqi fajar',\n    email: 'fajar@gmail.com',\n    gender: 'male',\n    status: 'active'\n};\n    \ntry {\n    const response = await axios.post(`${baseUrl}/public/v2/users`, createUser, {\n        headers: {\n            Authorization: `Bearer ${bearerToken}`\n        }\n    });\n    expect(response.status).to.equal(201);\n    userId = response.data.id;\n} catch (error) {\n}",
              "err": {},
              "uuid": "6f2b69e9-b498-420d-b0fd-3a9951e6166f",
              "parentUUID": "47347209-3d89-44bc-b583-ff5cdf96762b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[Negative] - POST Create a new user (invalid email)",
              "fullTitle": "Automation API Testing [Negative] - POST Create a new user (invalid email)",
              "timedOut": false,
              "duration": 120,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createUser = {\n    name: 'rizqi fajar',\n    email: 'fajarbukanemail',\n    gender: 'male',\n    status: 'active'\n};\ntry{\n    const response = await axios.post(`${baseUrl}/public/v2/users`, createUser, {\n        headers: {\n            Authorization: `Bearer ${bearerToken}`\n        }\n    });\n} catch (error) {\n    expect(error.response.status).to.equal(422);\n}",
              "err": {},
              "uuid": "24b65cff-f0e4-496e-9730-f6b9edd2dcc4",
              "parentUUID": "47347209-3d89-44bc-b583-ff5cdf96762b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[Positive] - GET user details",
              "fullTitle": "Automation API Testing [Positive] - GET user details",
              "timedOut": false,
              "duration": 128,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.get(`${baseUrl}/public/v2/users/${userId}`, {\n            headers: {\n                Authorization: `Bearer ${bearerToken}`\n            }\n        });\n        expect(response.status).to.equal(200);\n        expect(response.data.id).to.equal(userId);\n        expect(response.data.name).to.equal('rizqi fajar');\n        expect(response.data.email).to.equal('fajar@gmail.com');\n        expect(response.data.gender).to.equal('male');\n        expect(response.data.status).to.equal('active');",
              "err": {},
              "uuid": "a1b0a14f-2ca5-4332-9118-39188accf467",
              "parentUUID": "47347209-3d89-44bc-b583-ff5cdf96762b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[Negative] - GET user details (non-existent id)",
              "fullTitle": "Automation API Testing [Negative] - GET user details (non-existent id)",
              "timedOut": false,
              "duration": 128,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try{\n    const response = await axios.get(`${baseUrl}/public/v2/users/111`, {\n        headers: {\n            Authorization: `Bearer ${bearerToken}`\n        }\n        \n    });\n} catch (error) {\n    expect(error.response.status).to.equal(404);\n}",
              "err": {},
              "uuid": "ba9ff322-2393-4ad5-8b91-aa4b0ff65366",
              "parentUUID": "47347209-3d89-44bc-b583-ff5cdf96762b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[Negative] - GET User Details [invalid token]",
              "fullTitle": "Automation API Testing [Negative] - GET User Details [invalid token]",
              "timedOut": false,
              "duration": 190,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidToken = 'invalid_token_here';\n    \ntry {\n  await axios.get(baseUrl, {\n    headers: { Authorization: `Bearer ${invalidToken}` }\n  });\n} catch (error) {\n  expect(error.response.status).to.equal(401);\n}",
              "err": {},
              "uuid": "d10c7ba0-8afb-457c-b4c2-6dcca9cd162c",
              "parentUUID": "47347209-3d89-44bc-b583-ff5cdf96762b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[Positive] - PUT Update user",
              "fullTitle": "Automation API Testing [Positive] - PUT Update user",
              "timedOut": false,
              "duration": 147,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const UpdateUser = {\n    name: 'hanya fajar',\n    email: 'rizqi@gmail.com',\n    gender: 'male',\n    status: 'active'  \n};\n    \nconst response = await axios.put(`${baseUrl}/public/v2/users/${userId}`, UpdateUser, {\n    headers: {\n        Authorization: `Bearer ${bearerToken}`\n    }\n});\nexpect(response.status).to.equal(200);\nexpect(response.data.id).to.equal(userId);\nexpect(response.data.name).to.equal('hanya fajar');\nexpect(response.data.email).to.equal('rizqi@gmail.com');\nexpect(response.data.gender).to.equal('male');\nexpect(response.data.status).to.equal('active');",
              "err": {},
              "uuid": "7910dac1-9deb-4e7e-85bb-4844622122c3",
              "parentUUID": "47347209-3d89-44bc-b583-ff5cdf96762b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[Negative] - PUT Update user (fill gender aside from male and female)",
              "fullTitle": "Automation API Testing [Negative] - PUT Update user (fill gender aside from male and female)",
              "timedOut": false,
              "duration": 137,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const UpdateUser = {\n    name: 'hanya fajar',\n    email: 'rizqi@gmail.com',\n    gender: 'trans',\n    status: 'active'  \n};\ntry {\n    const response = await axios.put(`${baseUrl}/public/v2/users/${userId}`, UpdateUser, {\n        headers: {\n            Authorization: `Bearer ${bearerToken}`\n        }\n    });\n} catch (error) {\n    expect(error.response.status).to.equal(422);\n}",
              "err": {},
              "uuid": "69ed9665-7e95-4ed4-ac0e-a213dec9847a",
              "parentUUID": "47347209-3d89-44bc-b583-ff5cdf96762b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[Positive] - Delete user",
              "fullTitle": "Automation API Testing [Positive] - Delete user",
              "timedOut": false,
              "duration": 129,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await axios.delete(`${baseUrl}/public/v2/users/${userId}`, {\n            headers: {\n                Authorization: `Bearer ${bearerToken}`\n            }\n        });\n    \n        expect(response.status).to.equal(204);",
              "err": {},
              "uuid": "2e25b60e-8c99-44a7-9ff3-a7284db69523",
              "parentUUID": "47347209-3d89-44bc-b583-ff5cdf96762b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[Negative] - Delete user (non-existent id)",
              "fullTitle": "Automation API Testing [Negative] - Delete user (non-existent id)",
              "timedOut": false,
              "duration": 101,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try{\n            const response = await axios.delete(`${baseUrl}/public/v2/users/123`, {\n                headers: {\n                    Authorization: `Bearer ${bearerToken}`\n                }\n            });\n        } catch (error) {\n            expect(error.response.status).to.equal(404);\n        }",
              "err": {},
              "uuid": "f5e32ea5-392e-403e-b3d2-d5fb2acd532b",
              "parentUUID": "47347209-3d89-44bc-b583-ff5cdf96762b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6f2b69e9-b498-420d-b0fd-3a9951e6166f",
            "24b65cff-f0e4-496e-9730-f6b9edd2dcc4",
            "a1b0a14f-2ca5-4332-9118-39188accf467",
            "ba9ff322-2393-4ad5-8b91-aa4b0ff65366",
            "d10c7ba0-8afb-457c-b4c2-6dcca9cd162c",
            "7910dac1-9deb-4e7e-85bb-4844622122c3",
            "69ed9665-7e95-4ed4-ac0e-a213dec9847a",
            "2e25b60e-8c99-44a7-9ff3-a7284db69523",
            "f5e32ea5-392e-403e-b3d2-d5fb2acd532b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1533,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}